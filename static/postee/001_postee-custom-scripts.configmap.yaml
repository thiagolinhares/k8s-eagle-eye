apiVersion: v1
kind: ConfigMap
metadata:
  name: postee-custom-scripts
  namespace: "security-tools"
data:
  dd-upload.sh: "#!/usr/bin/env sh\n\n# this shell script is meant to be executed
    by a Aquasec/Postee \"exec\"\n# action, the event data is passed in through environment
    variable\n# POSTEE_EVENT\n#\n# Requirements on JSON format\n# ---------------------------\n#
    - JSON dictionary with \"defectdojo\" as top-level key\n# - \"defectdojo\" dictionary
    holds at least 2 keys\n#   - \"scan\", containing the report\n#   - \"metadata\",
    containing key/value pairs\n#\n# Required parameter\n# ------------------\n# -
    DEFECTDOJO_URL - Defectdojo URL, base URL, script appends path for v2\n# - DEFECTDOJO_API_TOKEN\n#
    - POSTEE_EVENT - variable containing the JSON content from template stage\n\n\nTEMP_PREFIX=\"/tmp/dd-scan-\"\n\nif
    [ -z \"$DEFECTDOJO_API_TOKEN\" ]; then\n  echo \"ERROR: could not find environment
    variable DEFECTDOJO_API_TOKEN\"\n  exit 1\nfi\n\nif [ -z \"$DEFECTDOJO_URL\" ];
    then\n  echo \"could not find environment variable DEFECTDOJO_URL\" \n  exit 1\nfi\n\nif
    [ -z \"$POSTEE_EVENT\" ]; then\n  echo \"could not read any input data from POSTEE_EVENT\"\n
    \ exit 1\nfi\n\n# shellcheck disable=SC2317 # used in signal trap for EXIT\n_cleanup()
    {\n  rm -f \"${TEMP_PREFIX}*\"\n}\n\ntrap _cleanup EXIT\n\n# write a temporary
    file with content received from POSTEE_EVENT\nTMP_FILE=\"$(mktemp ${TEMP_PREFIX}XXXXXX)\"\n\n_validate_json()\n{\n
    \ if echo \"$POSTEE_EVENT\" | jq '.defectdojo.scan' | grep 'null' 1>/dev/null;
    then\n    echo \"ERROR => JSON, unexpected structure \\\"defectdojo\\\"\"\n    return
    1\n  fi\n}\nif ! _validate_json; then\n  exit 1\nfi\n\necho \"$POSTEE_EVENT\"
    | jq '.defectdojo.scan' | tee \"$TMP_FILE\"\n\n# Initialize the command string\nCOMMAND=\"curl
    -H \\\"Authorization: Token $DEFECTDOJO_API_TOKEN\\\"\"\n\n# Check verb (action)
    to be performed, based on .defectdojo.verb\nVERB=$(echo \"$POSTEE_EVENT\" | jq
    '.defectdojo.verb')\n\n# If verb is delete, call DELETE on /api/v2/tests with
    the test_title, else call POST on /api/v2/reimport-scan/\nif [ \"$VERB\" = \"delete\"
    ]; then\n  # extract test_title from metadata key\n  TEST_TITLE=$(echo \"$POSTEE_EVENT\"
    | jq '.defectdojo.metadata.test_title')\n  echo \"INFO: verb is delete, will delete
    test with title ${TEST_TITLE}\"\n  if [ -z \"$TEST_TITLE\" ]; then\n    echo \"ERROR:
    could not find test_title in metadata\"\n    exit 1\n  else\n    DD_DELETE_URL=\"${DEFECTDOJO_URL}/api/v2/tests/?title=${TEST_TITLE}\"\n
    \   COMMAND=\"$COMMAND -X DELETE ${DD_DELETE_URL}\"\n  fi\nelse\n  echo \"Import
    new scan\"\n  # extract all key/value pairs from metadata key\n  # convert the
    resulting dictionary into multiline\n  # string => $key=$value, can further be
    consumed\n  # in a FOR loop generating a FORM entry per row\n  FORM_ENTRIES=$(echo
    \"$POSTEE_EVENT\" | jq '.defectdojo.metadata | keys_unsorted[] as $k | \"\\($k)=\\(
    .[$k])\"')\n\n  # to be able to ignore whitespaces in values,\n  # separator for
    FOR loops is configured to\n  # a newline character, remove unset IFS\n  OLD_IFS=\"$IFS\"\n
    \ # shellcheck disable=SC3003\n  IFS=$'\\n'\n  for entry in $FORM_ENTRIES; do\n
    \   COMMAND=\"$COMMAND -F $entry\"\n  done\n  IFS=\"$OLD_IFS\"\n\n\n  DD_IMPORT_URL=\"${DEFECTDOJO_URL}/api/v2/reimport-scan/\"\n\n
    \ # add URL and final JSON payload (trivy report)\n  COMMAND=\"$COMMAND -F \\\"file=@${TMP_FILE}\\\"
    -X POST ${DD_IMPORT_URL}\"\nfi\n\n\nif ! eval \"$COMMAND\"; then\n  echo \"ERROR:
    failed to call ${DD_IMPORT_URL}\"\n  exit 1\nfi\n\necho \"SUCCESS: status ok from
    ${DD_IMPORT_URL}\"\nexit 0"
